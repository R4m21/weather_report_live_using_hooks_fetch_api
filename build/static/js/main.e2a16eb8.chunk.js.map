{"version":3,"sources":["componets/App.js","index.js"],"names":["App","useState","city","setCity","feels_like","humidity","pressure","temp","temp_max","temp_min","main","setMain","description","icon","id","weather","setWeather","inpSearch","setInpSearch","coord","lon","lat","visibility","wind","speed","deg","dt","sys","country","sunrise","sunset","timezone","name","cityObj","setCityObj","url","time","map","val","Date","toLocaleTimeString","curTime","setCurTime","useEffect","a","fetch","res","json","resJson","getResponse","setInterval","className","type","value","autoComplete","placeholder","onChange","e","target","src","alt","style","textTransform","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2a16eb8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport \"../sass/style.scss\"\r\nconst App = () => {\r\n    const [city, setCity] = useState(null);\r\n    const [main, setMain] = useState({ feels_like: \"\", humidity: \"\", pressure: \"\", temp: \"\", temp_max: \"\", temp_min: \"\" });\r\n    const [weather, setWeather] = useState([{ description: \"\", icon: \"\", id: \"\", main: \"\" }]);\r\n    const [inpSearch, setInpSearch] = useState(\"mumbai\");\r\n    const [cityObj, setCityObj] = useState({ coord: { lon: \"\", lat: \"\" }, visibility: \"\", wind: { speed: \"\", deg: \"\" }, dt: \"\", sys: { country: \"\", sunrise: \"\", sunset: \"\" }, timezone: \"\", name: \"\" });\r\n    const url = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;\r\n    const t = [cityObj.dt, cityObj.sys.sunrise, cityObj.sys.sunset];\r\n    const time = t.map(val => new Date(val * 1000).toLocaleTimeString());\r\n    const [curTime,setCurTime] =useState(null);\r\n    useEffect(() => {\r\n        const getResponse = async () => {\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${inpSearch}&units=metric&appid=980b81bb9148dc743472d4cd0453cce3`;\r\n            const res = await fetch(url);\r\n            const resJson = await res.json();\r\n            setCity(resJson.name);\r\n            if (resJson.name) {\r\n                setCityObj(resJson);\r\n                setMain(resJson.main);\r\n                setWeather(resJson.weather);\r\n            }\r\n        }\r\n        getResponse();\r\n    }, [inpSearch]);\r\n    (()=>setInterval(()=>setCurTime(new Date().toLocaleTimeString()),1000))();\r\n    return (\r\n        <>\r\n            {/* searching for location */}\r\n            <div className=\"inputf\"><input type=\"text\" name=\"inpSearch\" value={inpSearch} id=\"\" autoComplete=\"off\" placeholder=\"Search Location\" onChange={e => setInpSearch(e.target.value)} /></div>\r\n            {!city ? <h1>city is not found</h1> :\r\n                <div>\r\n                    {/* Name of city */}\r\n                    <h1 className=\"head0\">{city}</h1>\r\n                    <div className=\"card\">\r\n                        {/* current time and weather text */}\r\n                        <div className=\"time\">\r\n                            <h3 className=\"head1\">current weather</h3>\r\n                            <p className=\"pg1\">{curTime}</p>\r\n                        </div>\r\n                        {/* current tempareture */}\r\n                        <div className=\"curTemp\">\r\n                            <div className=\"temp\">\r\n                                <h3 className=\"head2\">\r\n                                    <img src={url} alt={weather.main} />\r\n                                    <span style={{ textTransform: 'lowercase' }}>{main.temp}°c</span>\r\n                                </h3>\r\n                                <h2 className=\"head4\">{weather[0].description}</h2>\r\n                            </div>\r\n                            <p className=\"pg2\">RealFeel® <span style={{ color: '#000' }}>{main.feels_like}°</span></p>\r\n                        </div>\r\n                        <h3 className=\"head3\">overcast</h3>\r\n                        {/* overcast list */}\r\n                        <div className=\"row\">\r\n                            <div className=\"col1\">\r\n                                <ul>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">wind</span>\r\n                                        <span className=\"rt\" style={{ textTransform: \"lowercase\" }}>{cityObj.wind.speed}m/s</span>\r\n                                    </li>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">humidity</span>\r\n                                        <span className=\"rt\">{main.humidity}%</span>\r\n                                    </li>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">min-temp</span>\r\n                                        <span className=\"rt\" style={{ textTransform: \"lowercase\" }}>{main.temp_min}°c</span>\r\n                                    </li>\r\n                                    <li className=\"list_items li\">\r\n                                        <span className=\"lt\">max-temp</span>\r\n                                        <span className=\"rt\" style={{ textTransform: \"lowercase\" }}>{main.temp_max}°c</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"col2\">\r\n                                <ul>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\"> pressure</span>\r\n                                        <span className=\"rt\">↔ {main.pressure}mb</span>\r\n                                    </li>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">visibility</span>\r\n                                        <span className=\"rt\">{cityObj.visibility / 1000}km</span>\r\n                                    </li>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">sunrise</span>\r\n                                        <span className=\"rt\">{time[1]}</span>\r\n                                    </li>\r\n                                    <li className=\"list_items\">\r\n                                        <span className=\"lt\">sunset</span>\r\n                                        <span className=\"rt\">{time[2]}</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n            {city?<div className=\"ft\">update weather time : {time[0]}</div>:null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./componets/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}